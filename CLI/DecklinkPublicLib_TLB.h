// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 1/5/2018 1:59:03 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\Blackmagic Design\Desktop Video\DeckLink.dll (1)
// LIBID: {1469D378-8829-4FF0-9B3B-07DD5B16F3CB}
// LCID: 0
// Helpfile: 
// HelpString: Blackmagic Design DirectShow Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   DecklinkPublicLib_TLBH
#define   DecklinkPublicLib_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Decklinkpubliclib_tlb
{

// *********************************************************************//
// HelpString: Blackmagic Design DirectShow Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DecklinkPublicLib;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureProperties;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureProperties2;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureProperties;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureProperties2;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderProperties;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderProperties;
extern __declspec (package) const GUID CLSID_DecklinkCaptureFilter;
extern __declspec (package) const GUID CLSID_DecklinkRenderFilter;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter2;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter3;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter4;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter5;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter6;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter7;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter8;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter9;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter10;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter11;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter12;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter13;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter14;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter15;
extern __declspec (package) const GUID CLSID_DecklinkVideoCaptureFilter16;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter2;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter3;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter4;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter5;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter6;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter7;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter8;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter9;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter10;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter11;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter12;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter13;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter14;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter15;
extern __declspec (package) const GUID CLSID_DecklinkAudioCaptureFilter16;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter2;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter3;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter4;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter5;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter6;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter7;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter8;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter9;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter10;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter11;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter12;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter13;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter14;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter15;
extern __declspec (package) const GUID CLSID_DecklinkVideoRenderFilter16;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter2;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter3;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter4;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter5;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter6;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter7;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter8;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter9;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter10;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter11;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter12;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter13;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter14;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter15;
extern __declspec (package) const GUID CLSID_DecklinkAudioRenderFilter16;
extern __declspec (package) const GUID CLSID_DecklinkUpsampleFilter;
extern __declspec (package) const GUID CLSID_DecklinkEffectsFilter;
extern __declspec (package) const GUID CLSID_DecklinkEffectsProperties;
extern __declspec (package) const GUID CLSID_DecklinkMJPEGEncoderFilter;
extern __declspec (package) const GUID CLSID_DecklinkMJPEGEncoderProperties;
extern __declspec (package) const GUID CLSID_DecklinkMJPEGDecoderFilter;
extern __declspec (package) const GUID CLSID_DecklinkMJPEGDecoderProperties;
extern __declspec (package) const GUID CLSID_DecklinkStillSequenceSourceFilter;
extern __declspec (package) const GUID CLSID_DecklinkStillSequenceSinkFilter;
extern __declspec (package) const GUID IID_MEDIASUBTYPE_V210;
extern __declspec (package) const GUID IID_MEDIASUBTYPE_v210a;
extern __declspec (package) const GUID IID_MEDIASUBTYPE_r210;
extern __declspec (package) const GUID IID_MEDIASUBTYPE_HDYC;
extern __declspec (package) const GUID IID_IDecklinkKeyer;
extern __declspec (package) const GUID IID_IADecklinkKeyer;
extern __declspec (package) const GUID GUID_DecklinkRawCommandAsync;
extern __declspec (package) const GUID IID_IDecklinkRawDeviceControl;
extern __declspec (package) const GUID IID_IADecklinkRawDeviceControl;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0234_0001;
extern __declspec (package) const GUID GUID_DECKLINK_INPUT;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0234_0002;
extern __declspec (package) const GUID GUID_DECKLINK_GENLOCK;
extern __declspec (package) const GUID IID_IDecklinkStatus;
extern __declspec (package) const GUID IID_IADecklinkStatus;
extern __declspec (package) const GUID IID_IDecklinkCaptureBanner;
extern __declspec (package) const GUID IID_IADecklinkCaptureBanner;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0001;
extern __declspec (package) const GUID GUID_DECKLINK_BLACKINCAPTURE;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0002;
extern __declspec (package) const GUID GUID_DECKLINK_HDDOWNCONVERSION;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0003;
extern __declspec (package) const GUID GUID_DECKLINK_VIDEOOUTPUTCONVERSION_OUTPUTS;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0004;
extern __declspec (package) const GUID GUID_DECKLINK_AUDIOINPUTSOURCE;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0005;
extern __declspec (package) const GUID GUID_DECKLINK_IOFEATURES;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0006;
extern __declspec (package) const GUID GUID_DECKLINK_TIMECODESOURCE;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0007;
extern __declspec (package) const GUID GUID_DECKLINK_VIDEOINPUT;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_DecklinkInterface_0001_0238_0008;
extern __declspec (package) const GUID GUID_DECKLINK_VIDEOOUTPUT;
extern __declspec (package) const GUID IID_IDecklinkIOControl;
extern __declspec (package) const GUID IID_IADecklinkIOControl;
extern __declspec (package) const GUID IID_IDecklinkMediaSample;
extern __declspec (package) const GUID IID_IADecklinkMediaSample;
extern __declspec (package) const GUID IID_IDecklinkSampleGrabberCB;
extern __declspec (package) const GUID IID_IMediaSample;
extern __declspec (package) const GUID GUID__AMMediaType;
extern __declspec (package) const GUID IID_IDecklinkSampleGrabber;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
struct    DecklinkRawCommandAsync;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0234_0001;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0234_0002;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0001;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0002;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0003;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0004;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0005;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0006;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0007;
enum class    __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0008;
struct    _AMMediaType;
interface DECLSPEC_UUID("{30313276-B0B0-4DD3-8E8C-572692D526F6}") MEDIASUBTYPE_V210;
typedef TComInterface<MEDIASUBTYPE_V210, &IID_MEDIASUBTYPE_V210> MEDIASUBTYPE_V210Ptr;

interface DECLSPEC_UUID("{30313276-0000-0010-8000-00AA00389B71}") MEDIASUBTYPE_v210a;
typedef TComInterface<MEDIASUBTYPE_v210a, &IID_MEDIASUBTYPE_v210a> MEDIASUBTYPE_v210aPtr;

interface DECLSPEC_UUID("{30313272-0000-0010-8000-00AA00389B71}") MEDIASUBTYPE_r210;
typedef TComInterface<MEDIASUBTYPE_r210, &IID_MEDIASUBTYPE_r210> MEDIASUBTYPE_r210Ptr;

interface DECLSPEC_UUID("{43594448-0000-0010-8000-00AA00389B71}") MEDIASUBTYPE_HDYC;
typedef TComInterface<MEDIASUBTYPE_HDYC, &IID_MEDIASUBTYPE_HDYC> MEDIASUBTYPE_HDYCPtr;

interface DECLSPEC_UUID("{9D63ADFC-8D1A-451D-958E-12FA4B1EFD2F}") IDecklinkKeyer;
typedef TComInterface<IDecklinkKeyer, &IID_IDecklinkKeyer> IDecklinkKeyerPtr;

interface DECLSPEC_UUID("{4DB4A578-7353-46E3-A607-75F2E3B5E539}") IADecklinkKeyer;
typedef TComInterface<IADecklinkKeyer, &IID_IADecklinkKeyer> IADecklinkKeyerPtr;

interface DECLSPEC_UUID("{72D62DE6-010F-48E6-A251-78CA285BDFE0}") IDecklinkRawDeviceControl;
typedef TComInterface<IDecklinkRawDeviceControl, &IID_IDecklinkRawDeviceControl> IDecklinkRawDeviceControlPtr;

interface DECLSPEC_UUID("{AF2662C6-3ABE-498E-ADE9-2540B6E30608}") IADecklinkRawDeviceControl;
typedef TComInterface<IADecklinkRawDeviceControl, &IID_IADecklinkRawDeviceControl> IADecklinkRawDeviceControlPtr;

interface DECLSPEC_UUID("{15BE165D-BFF5-47F8-8E71-DE4657ABEBE5}") IDecklinkStatus;
typedef TComInterface<IDecklinkStatus, &IID_IDecklinkStatus> IDecklinkStatusPtr;

interface DECLSPEC_UUID("{8E530B1C-8276-4BFA-B8BA-4BD360C79FA7}") IADecklinkStatus;
typedef TComInterface<IADecklinkStatus, &IID_IADecklinkStatus> IADecklinkStatusPtr;

interface DECLSPEC_UUID("{26D02C91-B25F-40FF-9B39-63B3FABCC518}") IDecklinkCaptureBanner;
typedef TComInterface<IDecklinkCaptureBanner, &IID_IDecklinkCaptureBanner> IDecklinkCaptureBannerPtr;

interface DECLSPEC_UUID("{9B434A6C-768E-4F55-8EB2-D219EBA85193}") IADecklinkCaptureBanner;
typedef TComInterface<IADecklinkCaptureBanner, &IID_IADecklinkCaptureBanner> IADecklinkCaptureBannerPtr;

interface DECLSPEC_UUID("{60F58A81-A387-4922-AAAC-998BD9FBE1AA}") IDecklinkIOControl;
typedef TComInterface<IDecklinkIOControl, &IID_IDecklinkIOControl> IDecklinkIOControlPtr;

interface DECLSPEC_UUID("{EF0EE278-DFC0-432F-AD84-E780835B45B3}") IADecklinkIOControl;
typedef TComInterface<IADecklinkIOControl, &IID_IADecklinkIOControl> IADecklinkIOControlPtr;

interface DECLSPEC_UUID("{4CAEF6E0-714A-4B4C-902D-BC53AAB2C423}") IDecklinkMediaSample;
typedef TComInterface<IDecklinkMediaSample, &IID_IDecklinkMediaSample> IDecklinkMediaSamplePtr;

interface DECLSPEC_UUID("{5BD0A576-D366-4DFA-96AE-5292971A4999}") IADecklinkMediaSample;
typedef TComInterface<IADecklinkMediaSample, &IID_IADecklinkMediaSample> IADecklinkMediaSamplePtr;

interface DECLSPEC_UUID("{C23F9F44-2BC3-425A-8F56-CDADA8FCC9E9}") IDecklinkSampleGrabberCB;
typedef TComInterface<IDecklinkSampleGrabberCB, &IID_IDecklinkSampleGrabberCB> IDecklinkSampleGrabberCBPtr;

interface DECLSPEC_UUID("{56A8689A-0AD4-11CE-B03A-0020AF0BA770}") IMediaSample;
typedef TComInterface<IMediaSample, &IID_IMediaSample> IMediaSamplePtr;

interface DECLSPEC_UUID("{CAFA3E5A-16E0-42CE-B064-78DE6C3068F8}") IDecklinkSampleGrabber;
typedef TComInterface<IDecklinkSampleGrabber, &IID_IDecklinkSampleGrabber> IDecklinkSampleGrabberPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IUnknown DecklinkVideoCaptureFilter;
typedef IUnknownPtr DecklinkVideoCaptureFilterPtr;
typedef IUnknown DecklinkVideoCaptureProperties;
typedef IUnknownPtr DecklinkVideoCapturePropertiesPtr;
typedef IUnknown DecklinkVideoCaptureProperties2;
typedef IUnknownPtr DecklinkVideoCaptureProperties2Ptr;
typedef IUnknown DecklinkAudioCaptureFilter;
typedef IUnknownPtr DecklinkAudioCaptureFilterPtr;
typedef IUnknown DecklinkAudioCaptureProperties;
typedef IUnknownPtr DecklinkAudioCapturePropertiesPtr;
typedef IUnknown DecklinkAudioCaptureProperties2;
typedef IUnknownPtr DecklinkAudioCaptureProperties2Ptr;
typedef IUnknown DecklinkVideoRenderFilter;
typedef IUnknownPtr DecklinkVideoRenderFilterPtr;
typedef IUnknown DecklinkVideoRenderProperties;
typedef IUnknownPtr DecklinkVideoRenderPropertiesPtr;
typedef IUnknown DecklinkAudioRenderFilter;
typedef IUnknownPtr DecklinkAudioRenderFilterPtr;
typedef IUnknown DecklinkAudioRenderProperties;
typedef IUnknownPtr DecklinkAudioRenderPropertiesPtr;
typedef IUnknown DecklinkCaptureFilter;
typedef IUnknownPtr DecklinkCaptureFilterPtr;
typedef IUnknown DecklinkRenderFilter;
typedef IUnknownPtr DecklinkRenderFilterPtr;
typedef IUnknown DecklinkVideoCaptureFilter2;
typedef IUnknownPtr DecklinkVideoCaptureFilter2Ptr;
typedef IUnknown DecklinkVideoCaptureFilter3;
typedef IUnknownPtr DecklinkVideoCaptureFilter3Ptr;
typedef IUnknown DecklinkVideoCaptureFilter4;
typedef IUnknownPtr DecklinkVideoCaptureFilter4Ptr;
typedef IUnknown DecklinkVideoCaptureFilter5;
typedef IUnknownPtr DecklinkVideoCaptureFilter5Ptr;
typedef IUnknown DecklinkVideoCaptureFilter6;
typedef IUnknownPtr DecklinkVideoCaptureFilter6Ptr;
typedef IUnknown DecklinkVideoCaptureFilter7;
typedef IUnknownPtr DecklinkVideoCaptureFilter7Ptr;
typedef IUnknown DecklinkVideoCaptureFilter8;
typedef IUnknownPtr DecklinkVideoCaptureFilter8Ptr;
typedef IUnknown DecklinkVideoCaptureFilter9;
typedef IUnknownPtr DecklinkVideoCaptureFilter9Ptr;
typedef IUnknown DecklinkVideoCaptureFilter10;
typedef IUnknownPtr DecklinkVideoCaptureFilter10Ptr;
typedef IUnknown DecklinkVideoCaptureFilter11;
typedef IUnknownPtr DecklinkVideoCaptureFilter11Ptr;
typedef IUnknown DecklinkVideoCaptureFilter12;
typedef IUnknownPtr DecklinkVideoCaptureFilter12Ptr;
typedef IUnknown DecklinkVideoCaptureFilter13;
typedef IUnknownPtr DecklinkVideoCaptureFilter13Ptr;
typedef IUnknown DecklinkVideoCaptureFilter14;
typedef IUnknownPtr DecklinkVideoCaptureFilter14Ptr;
typedef IUnknown DecklinkVideoCaptureFilter15;
typedef IUnknownPtr DecklinkVideoCaptureFilter15Ptr;
typedef IUnknown DecklinkVideoCaptureFilter16;
typedef IUnknownPtr DecklinkVideoCaptureFilter16Ptr;
typedef IUnknown DecklinkAudioCaptureFilter2;
typedef IUnknownPtr DecklinkAudioCaptureFilter2Ptr;
typedef IUnknown DecklinkAudioCaptureFilter3;
typedef IUnknownPtr DecklinkAudioCaptureFilter3Ptr;
typedef IUnknown DecklinkAudioCaptureFilter4;
typedef IUnknownPtr DecklinkAudioCaptureFilter4Ptr;
typedef IUnknown DecklinkAudioCaptureFilter5;
typedef IUnknownPtr DecklinkAudioCaptureFilter5Ptr;
typedef IUnknown DecklinkAudioCaptureFilter6;
typedef IUnknownPtr DecklinkAudioCaptureFilter6Ptr;
typedef IUnknown DecklinkAudioCaptureFilter7;
typedef IUnknownPtr DecklinkAudioCaptureFilter7Ptr;
typedef IUnknown DecklinkAudioCaptureFilter8;
typedef IUnknownPtr DecklinkAudioCaptureFilter8Ptr;
typedef IUnknown DecklinkAudioCaptureFilter9;
typedef IUnknownPtr DecklinkAudioCaptureFilter9Ptr;
typedef IUnknown DecklinkAudioCaptureFilter10;
typedef IUnknownPtr DecklinkAudioCaptureFilter10Ptr;
typedef IUnknown DecklinkAudioCaptureFilter11;
typedef IUnknownPtr DecklinkAudioCaptureFilter11Ptr;
typedef IUnknown DecklinkAudioCaptureFilter12;
typedef IUnknownPtr DecklinkAudioCaptureFilter12Ptr;
typedef IUnknown DecklinkAudioCaptureFilter13;
typedef IUnknownPtr DecklinkAudioCaptureFilter13Ptr;
typedef IUnknown DecklinkAudioCaptureFilter14;
typedef IUnknownPtr DecklinkAudioCaptureFilter14Ptr;
typedef IUnknown DecklinkAudioCaptureFilter15;
typedef IUnknownPtr DecklinkAudioCaptureFilter15Ptr;
typedef IUnknown DecklinkAudioCaptureFilter16;
typedef IUnknownPtr DecklinkAudioCaptureFilter16Ptr;
typedef IUnknown DecklinkVideoRenderFilter2;
typedef IUnknownPtr DecklinkVideoRenderFilter2Ptr;
typedef IUnknown DecklinkVideoRenderFilter3;
typedef IUnknownPtr DecklinkVideoRenderFilter3Ptr;
typedef IUnknown DecklinkVideoRenderFilter4;
typedef IUnknownPtr DecklinkVideoRenderFilter4Ptr;
typedef IUnknown DecklinkVideoRenderFilter5;
typedef IUnknownPtr DecklinkVideoRenderFilter5Ptr;
typedef IUnknown DecklinkVideoRenderFilter6;
typedef IUnknownPtr DecklinkVideoRenderFilter6Ptr;
typedef IUnknown DecklinkVideoRenderFilter7;
typedef IUnknownPtr DecklinkVideoRenderFilter7Ptr;
typedef IUnknown DecklinkVideoRenderFilter8;
typedef IUnknownPtr DecklinkVideoRenderFilter8Ptr;
typedef IUnknown DecklinkVideoRenderFilter9;
typedef IUnknownPtr DecklinkVideoRenderFilter9Ptr;
typedef IUnknown DecklinkVideoRenderFilter10;
typedef IUnknownPtr DecklinkVideoRenderFilter10Ptr;
typedef IUnknown DecklinkVideoRenderFilter11;
typedef IUnknownPtr DecklinkVideoRenderFilter11Ptr;
typedef IUnknown DecklinkVideoRenderFilter12;
typedef IUnknownPtr DecklinkVideoRenderFilter12Ptr;
typedef IUnknown DecklinkVideoRenderFilter13;
typedef IUnknownPtr DecklinkVideoRenderFilter13Ptr;
typedef IUnknown DecklinkVideoRenderFilter14;
typedef IUnknownPtr DecklinkVideoRenderFilter14Ptr;
typedef IUnknown DecklinkVideoRenderFilter15;
typedef IUnknownPtr DecklinkVideoRenderFilter15Ptr;
typedef IUnknown DecklinkVideoRenderFilter16;
typedef IUnknownPtr DecklinkVideoRenderFilter16Ptr;
typedef IUnknown DecklinkAudioRenderFilter2;
typedef IUnknownPtr DecklinkAudioRenderFilter2Ptr;
typedef IUnknown DecklinkAudioRenderFilter3;
typedef IUnknownPtr DecklinkAudioRenderFilter3Ptr;
typedef IUnknown DecklinkAudioRenderFilter4;
typedef IUnknownPtr DecklinkAudioRenderFilter4Ptr;
typedef IUnknown DecklinkAudioRenderFilter5;
typedef IUnknownPtr DecklinkAudioRenderFilter5Ptr;
typedef IUnknown DecklinkAudioRenderFilter6;
typedef IUnknownPtr DecklinkAudioRenderFilter6Ptr;
typedef IUnknown DecklinkAudioRenderFilter7;
typedef IUnknownPtr DecklinkAudioRenderFilter7Ptr;
typedef IUnknown DecklinkAudioRenderFilter8;
typedef IUnknownPtr DecklinkAudioRenderFilter8Ptr;
typedef IUnknown DecklinkAudioRenderFilter9;
typedef IUnknownPtr DecklinkAudioRenderFilter9Ptr;
typedef IUnknown DecklinkAudioRenderFilter10;
typedef IUnknownPtr DecklinkAudioRenderFilter10Ptr;
typedef IUnknown DecklinkAudioRenderFilter11;
typedef IUnknownPtr DecklinkAudioRenderFilter11Ptr;
typedef IUnknown DecklinkAudioRenderFilter12;
typedef IUnknownPtr DecklinkAudioRenderFilter12Ptr;
typedef IUnknown DecklinkAudioRenderFilter13;
typedef IUnknownPtr DecklinkAudioRenderFilter13Ptr;
typedef IUnknown DecklinkAudioRenderFilter14;
typedef IUnknownPtr DecklinkAudioRenderFilter14Ptr;
typedef IUnknown DecklinkAudioRenderFilter15;
typedef IUnknownPtr DecklinkAudioRenderFilter15Ptr;
typedef IUnknown DecklinkAudioRenderFilter16;
typedef IUnknownPtr DecklinkAudioRenderFilter16Ptr;
typedef IUnknown DecklinkUpsampleFilter;
typedef IUnknownPtr DecklinkUpsampleFilterPtr;
typedef IUnknown DecklinkEffectsFilter;
typedef IUnknownPtr DecklinkEffectsFilterPtr;
typedef IUnknown DecklinkEffectsProperties;
typedef IUnknownPtr DecklinkEffectsPropertiesPtr;
typedef IUnknown DecklinkMJPEGEncoderFilter;
typedef IUnknownPtr DecklinkMJPEGEncoderFilterPtr;
typedef IUnknown DecklinkMJPEGEncoderProperties;
typedef IUnknownPtr DecklinkMJPEGEncoderPropertiesPtr;
typedef IUnknown DecklinkMJPEGDecoderFilter;
typedef IUnknownPtr DecklinkMJPEGDecoderFilterPtr;
typedef IUnknown DecklinkMJPEGDecoderProperties;
typedef IUnknownPtr DecklinkMJPEGDecoderPropertiesPtr;
typedef IUnknown DecklinkStillSequenceSourceFilter;
typedef IUnknownPtr DecklinkStillSequenceSourceFilterPtr;
typedef IUnknown DecklinkStillSequenceSinkFilter;
typedef IUnknownPtr DecklinkStillSequenceSinkFilterPtr;

#define LIBID_OF_DecklinkVideoCaptureFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureProperties2 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureProperties2 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkCaptureFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkRenderFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter2 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter3 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter4 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter5 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter6 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter7 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter8 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter9 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter10 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter11 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter12 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter13 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter14 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter15 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoCaptureFilter16 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter2 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter3 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter4 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter5 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter6 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter7 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter8 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter9 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter10 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter11 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter12 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter13 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter14 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter15 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioCaptureFilter16 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter2 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter3 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter4 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter5 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter6 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter7 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter8 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter9 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter10 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter11 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter12 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter13 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter14 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter15 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkVideoRenderFilter16 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter2 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter3 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter4 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter5 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter6 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter7 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter8 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter9 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter10 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter11 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter12 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter13 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter14 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter15 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkAudioRenderFilter16 (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkUpsampleFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkEffectsFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkEffectsProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkMJPEGEncoderFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkMJPEGEncoderProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkMJPEGDecoderFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkMJPEGDecoderProperties (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkStillSequenceSourceFilter (&LIBID_DecklinkPublicLib)
#define LIBID_OF_DecklinkStillSequenceSinkFilter (&LIBID_DecklinkPublicLib)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0234_0001 DECKLINK_INPUT;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0234_0002 DECKLINK_GENLOCK;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0001 DECKLINK_BLACKINCAPTURE;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0002 DECKLINK_HDDOWNCONVERSION;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0003 DECKLINK_VIDEOOUTPUTCONVERSION_OUTPUTS;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0004 DECKLINK_AUDIOINPUTSOURCE;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0005 DECKLINK_IOFEATURES;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0006 DECKLINK_TIMECODESOURCE;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0007 DECKLINK_VIDEOINPUT;
typedef Decklinkpubliclib_tlb::__MIDL___MIDL_itf_DecklinkInterface_0001_0238_0008 DECKLINK_VIDEOOUTPUT;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0234_0001
{
  DECKLINK_INPUT_NONE = 0, 
  DECKLINK_INPUT_PRESENT = 1, 
  DECKLINK_INPUT_MAX = 2
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0234_0002
{
  DECKLINK_GENLOCK_NOTSUPPORTED = 0, 
  DECKLINK_GENLOCK_NOTCONNECTED = 1, 
  DECKLINK_GENLOCK_LOCKED = 2, 
  DECKLINK_GENLOCK_NOTLOCKED = 3, 
  DECKLINK_GENLOCK_MAX = 4
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0001
{
  DECKLINK_BLACKINCAPTURE_NONE = 0, 
  DECKLINK_BLACKINCAPTURE_DIGITAL = 1, 
  DECKLINK_BLACKINCAPTURE_ANALOGUE = 2, 
  DECKLINK_BLACKINCAPTURE_MAX = 3
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0002
{
  DECKLINK_HDDOWNCONVERSION_OFF = 0, 
  DECKLINK_HDDOWNCONVERSION_LB16X9 = 1, 
  DECKLINK_HDDOWNCONVERSION_ANA = 2, 
  DECKLINK_HDDOWNCONVERSION_CENTER = 3, 
  DECKLINK_HDCROSSCONVERSION_720P1080P = 4, 
  DECKLINK_HDUPCONVERSION_ANA720P = 5, 
  DECKLINK_HDUPCONVERSION_ANA1080I = 6, 
  DECKLINK_HDUPCONVERSION_PB720P = 7, 
  DECKLINK_HDUPCONVERSION_PB1080I = 8, 
  DECKLINK_HDUPCONVERSION_ANA149_720P = 9, 
  DECKLINK_HDUPCONVERSION_ANA149_1080I = 10, 
  DECKLINK_HDDOWNCONVERSION_MAX = 11
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0003
{
  DECKLINK_VIDEOOUTPUTCONVERSIONONANALOG = 1, 
  DECKLINK_VIDEOOUTPUTCONVERSIONONHDMI = 2
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0004
{
  DECKLINK_AUDIOINPUTSOURCE_EMBEDDED = 0, 
  DECKLINK_AUDIOINPUTSOURCE_AESEBU = 1, 
  DECKLINK_AUDIOINPUTSOURCE_ANALOGUE = 2, 
  DECKLINK_AUDIOINPUTSOURCE_MAX = 3, 
  DECKLINK_AUDIOINPUTSOURCE_SDI = 0
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0005
{
  DECKLINK_IOFEATURES_SUPPORTSRGB10BITCAPTURE = 1, 
  DECKLINK_IOFEATURES_SUPPORTSRGB10BITPLAYBACK = 2, 
  DECKLINK_IOFEATURES_SUPPORTSINTERNALKEY = 16, 
  DECKLINK_IOFEATURES_SUPPORTSEXTERNALKEY = 32, 
  DECKLINK_IOFEATURES_HASCOMPONENTVIDEOOUTPUT = 64, 
  DECKLINK_IOFEATURES_HASCOMPOSITEVIDEOOUTPUT = 128, 
  DECKLINK_IOFEATURES_HASDIGITALVIDEOOUTPUT = 256, 
  DECKLINK_IOFEATURES_HASDVIVIDEOOUTPUT = 512, 
  DECKLINK_IOFEATURES_HASCOMPONENTVIDEOINPUT = 1024, 
  DECKLINK_IOFEATURES_HASCOMPOSITEVIDEOINPUT = 2048, 
  DECKLINK_IOFEATURES_HASDIGITALVIDEOINPUT = 4096, 
  DECKLINK_IOFEATURES_HASDUALLINKOUTPUT = 8192, 
  DECKLINK_IOFEATURES_HASDUALLINKINPUT = 16384, 
  DECKLINK_IOFEATURES_SUPPORTSHD = 32768, 
  DECKLINK_IOFEATURES_SUPPORTS2KOUTPUT = 65536, 
  DECKLINK_IOFEATURES_SUPPORTSHDDOWNCONVERSION = 131072, 
  DECKLINK_IOFEATURES_HASAESAUDIOINPUT = 262144, 
  DECKLINK_IOFEATURES_HASANALOGUEAUDIOINPUT = 524288, 
  DECKLINK_IOFEATURES_HASSVIDEOINPUT = 1048576, 
  DECKLINK_IOFEATURES_HASSVIDEOOUTPUT = 2097152, 
  DECKLINK_IOFEATURES_SUPPORTSMULTICAMERAINPUT = 4194304, 
  DECKLINK_IOFEATURES_HASRS422SERIALPORT = 8388608, 
  DECKLINK_IOFEATURES_HASHDMIINPUT = 16777216, 
  DECKLINK_IOFEATURES_HASHDMIOUTPUT = 33554432, 
  DECKLINK_IOFEATURES_HASOPTICALSDIINPUT = 67108864, 
  DECKLINK_IOFEATURES_HASOPTICALSDIOUTPUT = 134217728, 
  DECKLINK_IOFEATURES_MAX = 134217729
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0006
{
  DECKLINK_TIMECODESOURCE_VITC = 0, 
  DECKLINK_TIMECODESOURCE_HANC = 1, 
  DECKLINK_TIMECODESOURCE_MAX = 2
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0007
{
  DECKLINK_VIDEOINPUT_SDI = 0, 
  DECKLINK_VIDEOINPUT_COMPONENT = 1, 
  DECKLINK_VIDEOINPUT_COMPOSITE = 2, 
  DECKLINK_VIDEOINPUT_SVIDEO = 3, 
  DECKLINK_VIDEOINPUT_HDMI = 4, 
  DECKLINK_VIDEOINPUT_OPTICALSDI = 5, 
  DECKLINK_VIDEOINPUT_MAX = 6
};

enum class __MIDL___MIDL_itf_DecklinkInterface_0001_0238_0008
{
  DECKLINK_VIDEOOUTPUT_COMPONENT = 0, 
  DECKLINK_VIDEOOUTPUT_COMPOSITE = 1, 
  DECKLINK_VIDEOOUTPUT_SVIDEO = 2, 
  DECKLINK_VIDEOOUTPUT_MAX = 3
};


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct DecklinkRawCommandAsync
{
  unsigned_char* command;
  unsigned lenCommand;
  long asyncResult;
  unsigned_char* response;
  unsigned lenResponse;
  long commandComplete;
};

struct _AMMediaType
{
  System::TGUID majortype;
  System::TGUID subtype;
  long bFixedSizeSamples;
  long bTemporalCompression;
  unsigned_long lSampleSize;
  System::TGUID formattype;
  LPUNKNOWN pUnk;
  unsigned_long cbFormat;
  unsigned_char* pbFormat;
};

// *********************************************************************//
// Interface: MEDIASUBTYPE_V210
// Flags:     (0)
// GUID:      {30313276-B0B0-4DD3-8E8C-572692D526F6}
// *********************************************************************//
interface MEDIASUBTYPE_V210 
{
public:
};

// *********************************************************************//
// Interface: MEDIASUBTYPE_v210a
// Flags:     (0)
// GUID:      {30313276-0000-0010-8000-00AA00389B71}
// *********************************************************************//
interface MEDIASUBTYPE_v210a 
{
public:
};

// *********************************************************************//
// Interface: MEDIASUBTYPE_r210
// Flags:     (0)
// GUID:      {30313272-0000-0010-8000-00AA00389B71}
// *********************************************************************//
interface MEDIASUBTYPE_r210 
{
public:
};

// *********************************************************************//
// Interface: MEDIASUBTYPE_HDYC
// Flags:     (0)
// GUID:      {43594448-0000-0010-8000-00AA00389B71}
// *********************************************************************//
interface MEDIASUBTYPE_HDYC 
{
public:
};

// *********************************************************************//
// Interface: IDecklinkKeyer
// Flags:     (0)
// GUID:      {9D63ADFC-8D1A-451D-958E-12FA4B1EFD2F}
// *********************************************************************//
interface IDecklinkKeyer  : public IUnknown
{
public:
  // [-1] Enable internal or external keying
  virtual HRESULT STDMETHODCALLTYPE set_AlphaBlendModeOn(unsigned isExternalKey/*[in]*/) = 0;
  // [-1] Disable internal or external keying
  virtual HRESULT STDMETHODCALLTYPE set_AlphaBlendModeOff(void) = 0;
  // [-1] Set the opacity level of the key
  virtual HRESULT STDMETHODCALLTYPE set_AlphaLevel(unsigned alphaLevel/*[in]*/) = 0;
  // [-1] Configure auto blending
  virtual HRESULT STDMETHODCALLTYPE set_AlphaAutoBlendSettings(unsigned rampFrames/*[in]*/, 
                                                               unsigned onFrames/*[in]*/, 
                                                               unsigned offFrames/*[in]*/, 
                                                               unsigned blendProcessRepeats/*[in]*/) = 0;
  // [-1] Enables auto blending
  virtual HRESULT STDMETHODCALLTYPE do_AlphaRampOn(unsigned framesDuration/*[in]*/) = 0;
  // [-1] Disables auto blending
  virtual HRESULT STDMETHODCALLTYPE do_AlphaRampOff(unsigned framesDuration/*[in]*/) = 0;
  // [-1] Indicates whether the DeckLink device supports internal keying
  virtual HRESULT STDMETHODCALLTYPE get_DeviceSupportsKeying(void) = 0;
  // [-1] Indicates whether the DeckLink device supports external keying
  virtual HRESULT STDMETHODCALLTYPE get_DeviceSupportsExternalKeying(void) = 0;
  // [-1] Set the timebase of the still source
  virtual HRESULT STDMETHODCALLTYPE set_DefaultTimebase(long Timebase/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IADecklinkKeyer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4DB4A578-7353-46E3-A607-75F2E3B5E539}
// *********************************************************************//
interface IADecklinkKeyer  : public IDispatch
{
public:
  // [1] Enable internal or external keying
  virtual HRESULT STDMETHODCALLTYPE set_AlphaBlendModeOn(unsigned isExternalKey/*[in]*/) = 0;
  // [2] Disable internal or external keying
  virtual HRESULT STDMETHODCALLTYPE set_AlphaBlendModeOff(void) = 0;
  // [3] Set the opacity level of the key
  virtual HRESULT STDMETHODCALLTYPE set_AlphaLevel(unsigned alphaLevel/*[in]*/) = 0;
  // [4] Configure auto blending
  virtual HRESULT STDMETHODCALLTYPE set_AlphaAutoBlendSettings(unsigned rampFrames/*[in]*/, 
                                                               unsigned onFrames/*[in]*/, 
                                                               unsigned offFrames/*[in]*/, 
                                                               unsigned blendProcessRepeats/*[in]*/) = 0;
  // [5] Enables auto blending
  virtual HRESULT STDMETHODCALLTYPE do_AlphaRampOn(unsigned framesDuration/*[in]*/) = 0;
  // [6] Disables auto blending
  virtual HRESULT STDMETHODCALLTYPE do_AlphaRampOff(unsigned framesDuration/*[in]*/) = 0;
  // [7] Indicates whether the DeckLink device supports internal keying
  virtual HRESULT STDMETHODCALLTYPE get_DeviceSupportsKeying(void) = 0;
  // [8] Indicates whether the DeckLink device supports external keying
  virtual HRESULT STDMETHODCALLTYPE get_DeviceSupportsExternalKeying(void) = 0;
  // [9] Set the timebase of the still source
  virtual HRESULT STDMETHODCALLTYPE set_DefaultTimebase(long Timebase/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDecklinkRawDeviceControl
// Flags:     (0)
// GUID:      {72D62DE6-010F-48E6-A251-78CA285BDFE0}
// *********************************************************************//
interface IDecklinkRawDeviceControl  : public IUnknown
{
public:
  // [-1] Send a raw RS422 command synchronously
  virtual HRESULT STDMETHODCALLTYPE SendRawCommandSync(unsigned_char* command/*[in]*/, 
                                                       unsigned lenCommand/*[in]*/, 
                                                       unsigned_char* response/*[in,out]*/, 
                                                       unsigned* lenResponse/*[in,out]*/) = 0;
  // [-1] Send a raw RS422 command asynchronously
  virtual HRESULT STDMETHODCALLTYPE SendRawCommandAsync(Decklinkpubliclib_tlb::DecklinkRawCommandAsync* args/*[in,out]*/) = 0;
};

// *********************************************************************//
// Interface: IADecklinkRawDeviceControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AF2662C6-3ABE-498E-ADE9-2540B6E30608}
// *********************************************************************//
interface IADecklinkRawDeviceControl  : public IDispatch
{
public:
  // [1] Send a raw RS422 command synchronously
  virtual HRESULT STDMETHODCALLTYPE SendRawCommandSync(unsigned_char* command/*[in]*/, 
                                                       unsigned lenCommand/*[in]*/, 
                                                       unsigned_char* response/*[in,out]*/, 
                                                       unsigned* lenResponse/*[in,out]*/) = 0;
  // [2] Send a raw RS422 command asynchronously
  virtual HRESULT STDMETHODCALLTYPE SendRawCommandAsync2(VARIANT* rawCommand/*[in,out]*/, 
                                                         unsigned cRawCommand/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDecklinkStatus
// Flags:     (0)
// GUID:      {15BE165D-BFF5-47F8-8E71-DE4657ABEBE5}
// *********************************************************************//
interface IDecklinkStatus  : public IUnknown
{
public:
  // [-1] Provides the status of the video input and genlock
  virtual HRESULT STDMETHODCALLTYPE GetVideoInputStatus(int* videoStatus/*[out]*/, 
                                                        int* genlockStatus/*[out]*/) = 0;
  // [-1] Registers an event which is signalled on change of the video input
  virtual HRESULT STDMETHODCALLTYPE RegisterVideoStatusChangeEvent(unsigned_long event/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IADecklinkStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E530B1C-8276-4BFA-B8BA-4BD360C79FA7}
// *********************************************************************//
interface IADecklinkStatus  : public IDispatch
{
public:
  // [1] Provides the status of the video input and genlock
  virtual HRESULT STDMETHODCALLTYPE GetVideoInputStatus(int* videoStatus/*[out]*/, 
                                                        int* genlockStatus/*[out]*/) = 0;
  // [2] Registers an event which is signalled on change of the video input
  virtual HRESULT STDMETHODCALLTYPE RegisterVideoStatusChangeEvent(unsigned_long event/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDecklinkCaptureBanner
// Flags:     (0)
// GUID:      {26D02C91-B25F-40FF-9B39-63B3FABCC518}
// *********************************************************************//
interface IDecklinkCaptureBanner  : public IUnknown
{
public:
  // [-1] Retrieve a pointer to the 'No Input' banner
  virtual HRESULT STDMETHODCALLTYPE GetNoInputFrame(unsigned_char** frame/*[out]*/) = 0;
  // [-1] Create a frame of black video
  virtual HRESULT STDMETHODCALLTYPE BlackVideo(unsigned_char* bmih/*[in]*/, 
                                               unsigned_char* frame/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IADecklinkCaptureBanner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B434A6C-768E-4F55-8EB2-D219EBA85193}
// *********************************************************************//
interface IADecklinkCaptureBanner  : public IDispatch
{
public:
  // [1] Retrieve a pointer to the 'No Input' banner
  virtual HRESULT STDMETHODCALLTYPE GetNoInputFrame(unsigned_char** frame/*[out]*/) = 0;
  // [2] Create a frame of black video
  virtual HRESULT STDMETHODCALLTYPE BlackVideo(unsigned_char* bmih/*[in]*/, 
                                               unsigned_char* frame/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDecklinkIOControl
// Flags:     (0)
// GUID:      {60F58A81-A387-4922-AAAC-998BD9FBE1AA}
// *********************************************************************//
interface IDecklinkIOControl  : public IUnknown
{
public:
  // [-1] Returns the supported I/O features
  virtual HRESULT STDMETHODCALLTYPE GetIOFeatures(unsigned_long* features/*[out]*/) = 0;
  // [-1] Set the analogue video output
  virtual HRESULT STDMETHODCALLTYPE SetAnalogueOutput(long isComponent/*[in]*/, 
                                                      long setupIs75/*[in]*/) = 0;
  // [-1] Set the video input
  virtual HRESULT STDMETHODCALLTYPE SetVideoInput(long inputIsDigital/*[in]*/, 
                                                  long isComponent/*[in]*/, long setupIs75/*[in]*/) = 0;
  // [-1] Set the dual link output
  virtual HRESULT STDMETHODCALLTYPE SetDualLinkOutput(long enableDualLinkOutput/*[in]*/) = 0;
  // [-1] Sets single field on output when not playing back
  virtual HRESULT STDMETHODCALLTYPE SetSingleFieldOutputForSynchronousFrames(long singleFieldOutput/*[in]*/) = 0;
  // [-1] Enables 3:2 pulldown for HD23.976 to HD29.97 conversion
  virtual HRESULT STDMETHODCALLTYPE SetHDTVPulldownOnOutput(long enableHDTV32PulldownOnOutput/*[in]*/) = 0;
  // [-1] Sets black video on outputs during capture
  virtual HRESULT STDMETHODCALLTYPE SetBlackToDeckInCapture(unsigned_long blackToDeckSetting/*[in]*/) = 0;
  // [-1] Sets the A-Frame reference for 3:2 pulldown removal
  virtual HRESULT STDMETHODCALLTYPE SetAFrameReference(unsigned_long aFrameReference/*[in]*/) = 0;
  // [-1] Specifies the VANC lines to capture
  virtual HRESULT STDMETHODCALLTYPE SetCaptureVANCLines(unsigned_long vancLine1/*[in]*/, 
                                                        unsigned_long vancLine2/*[in]*/, 
                                                        unsigned_long vancLine3/*[in]*/) = 0;
  // [-1] Sets the HD downconversion mode on the output
  virtual HRESULT STDMETHODCALLTYPE SetVideoOutputDownconversionMode(unsigned_long downconversionMode/*[in]*/) = 0;
  // [-1] Sets the analogue audio input
  virtual HRESULT STDMETHODCALLTYPE SetAudioInputSource(unsigned_long audioInputSource/*[in]*/) = 0;
  // [-1] Specifies the timing offset for genlock
  virtual HRESULT STDMETHODCALLTYPE SetGenlockTiming(int timingOffset/*[in]*/) = 0;
  // [-1] An enhanced version of SetVideoOutputDownconversionMode
  virtual HRESULT STDMETHODCALLTYPE SetVideoOutputDownconversionMode2(unsigned_long downconversionMode/*[in]*/, 
                                                                      unsigned_long selectVideoOutputConversionOutputs/*[in]*/) = 0;
  // [-1] Specifies the source of timecode during capture
  virtual HRESULT STDMETHODCALLTYPE SetCaptureTimecodeSource(unsigned_long timecodeSource/*[in]*/) = 0;
  // [-1] An enhanced version of SetVideoInput
  virtual HRESULT STDMETHODCALLTYPE SetVideoInput2(unsigned_long videoSource/*[in]*/, 
                                                   long setupIs75/*[in]*/, 
                                                   long componentLevelsSMPTE/*[in]*/) = 0;
  // [-1] An enhanced version of SetAnalogueOutput
  virtual HRESULT STDMETHODCALLTYPE SetAnalogueOutput2(unsigned_long videoOutput/*[in]*/, 
                                                       long setupIs75/*[in]*/, 
                                                       long componentLevelsSMPTE/*[in]*/) = 0;
};

// *********************************************************************//
// Interface: IADecklinkIOControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF0EE278-DFC0-432F-AD84-E780835B45B3}
// *********************************************************************//
interface IADecklinkIOControl  : public IDispatch
{
public:
  // [1] Returns the supported I/O features
  virtual HRESULT STDMETHODCALLTYPE GetIOFeatures(unsigned_long* features/*[out]*/) = 0;
  // [2] Set the analogue video output
  virtual HRESULT STDMETHODCALLTYPE SetAnalogueOutput(long isComponent/*[in]*/, 
                                                      long setupIs75/*[in]*/) = 0;
  // [3] Set the video input
  virtual HRESULT STDMETHODCALLTYPE SetVideoInput(long inputIsDigital/*[in]*/, 
                                                  long isComponent/*[in]*/, long setupIs75/*[in]*/) = 0;
  // [4] Set the dual link output
  virtual HRESULT STDMETHODCALLTYPE SetDualLinkOutput(long enableDualLinkOutput/*[in]*/) = 0;
  // [5] Sets single field on output when not playing back
  virtual HRESULT STDMETHODCALLTYPE SetSingleFieldOutputForSynchronousFrames(long singleFieldOutput/*[in]*/) = 0;
  // [6] Enables 3:2 pulldown for HD23.976 to HD29.97 conversion
  virtual HRESULT STDMETHODCALLTYPE SetHDTVPulldownOnOutput(long enableHDTV32PulldownOnOutput/*[in]*/) = 0;
  // [7] Sets black video on outputs during capture
  virtual HRESULT STDMETHODCALLTYPE SetBlackToDeckInCapture(unsigned_long blackToDeckSetting/*[in]*/) = 0;
  // [8] Sets the A-Frame reference for 3:2 pulldown removal
  virtual HRESULT STDMETHODCALLTYPE SetAFrameReference(unsigned_long aFrameReference/*[in]*/) = 0;
  // [9] Specifies the VANC lines to capture
  virtual HRESULT STDMETHODCALLTYPE SetCaptureVANCLines(unsigned_long vancLine1/*[in]*/, 
                                                        unsigned_long vancLine2/*[in]*/, 
                                                        unsigned_long vancLine3/*[in]*/) = 0;
  // [10] Sets the HD downconversion mode on the output
  virtual HRESULT STDMETHODCALLTYPE SetVideoOutputDownconversionMode(unsigned_long downconversionMode/*[in]*/) = 0;
  // [11] Sets the analogue audio input
  virtual HRESULT STDMETHODCALLTYPE SetAudioInputSource(unsigned_long audioInputSource/*[in]*/) = 0;
  // [12] Specifies the timing offset for genlock
  virtual HRESULT STDMETHODCALLTYPE SetGenlockTiming(int timingOffset/*[in]*/) = 0;
  // [13] An enhanced version of SetVideoOutputDownconversionMode
  virtual HRESULT STDMETHODCALLTYPE SetVideoOutputDownconversionMode2(unsigned_long downconversionMode/*[in]*/, 
                                                                      unsigned_long selectVideoOutputConversionOutputs/*[in]*/) = 0;
  // [14] Specifies the source of timecode during capture
  virtual HRESULT STDMETHODCALLTYPE SetCaptureTimecodeSource(unsigned_long timecodeSource/*[in]*/) = 0;
  // [15] An enhanced version of SetVideoInput
  virtual HRESULT STDMETHODCALLTYPE SetVideoInput2(unsigned_long videoSource/*[in]*/, 
                                                   long setupIs75/*[in]*/, 
                                                   long componentLevelsSMPTE/*[in]*/) = 0;
  // [16] An enhanced version of SetAnalogueOutput
  virtual HRESULT STDMETHODCALLTYPE SetAnalogueOutput2(unsigned_long videoOutput/*[in]*/, 
                                                       long setupIs75/*[in]*/, 
                                                       long componentLevelsSMPTE/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDecklinkMediaSample
// Flags:     (0)
// GUID:      {4CAEF6E0-714A-4B4C-902D-BC53AAB2C423}
// *********************************************************************//
interface IDecklinkMediaSample  : public IUnknown
{
public:
  // [-1] Retrieve the VANC buffer attached to the sample
  virtual HRESULT STDMETHODCALLTYPE GetVANCBuffer(unsigned_char** ppBuffer/*[out]*/) = 0;
};

// *********************************************************************//
// Interface: IADecklinkMediaSample
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BD0A576-D366-4DFA-96AE-5292971A4999}
// *********************************************************************//
interface IADecklinkMediaSample  : public IDispatch
{
public:
  // [1] Retrieve the VANC buffer attached to the sample
  virtual HRESULT STDMETHODCALLTYPE GetVANCBuffer(unsigned_char** ppBuffer/*[out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDecklinkSampleGrabberCB
// Flags:     (0)
// GUID:      {C23F9F44-2BC3-425A-8F56-CDADA8FCC9E9}
// *********************************************************************//
interface IDecklinkSampleGrabberCB  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE SampleCB(double SampleTime/*[in]*/, 
                                             Decklinkpubliclib_tlb::IMediaSample* pSample/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BufferCB(double SampleTime/*[in]*/, 
                                             unsigned_char* pBuffer/*[in]*/, long BufferLen/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IMediaSample
// Flags:     (0)
// GUID:      {56A8689A-0AD4-11CE-B03A-0020AF0BA770}
// *********************************************************************//
interface IMediaSample  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetPointer(unsigned_char** ppBuffer/*[out]*/) = 0; // [-1]
  virtual long STDMETHODCALLTYPE GetSize(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetTime(__int64* pTimeStart/*[out]*/, __int64* pTimeEnd/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetTime(__int64* pTimeStart/*[in]*/, __int64* pTimeEnd/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsSyncPoint(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSyncPoint(long bIsSyncPoint) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsPreroll(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetPreroll(long bIsPreroll) = 0; // [-1]
  virtual long STDMETHODCALLTYPE GetActualDataLength(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetActualDataLength(long __MIDL__IMediaSample0000) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetMediaType(Decklinkpubliclib_tlb::_AMMediaType** ppMediaType/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetMediaType(Decklinkpubliclib_tlb::_AMMediaType* pMediaType/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsDiscontinuity(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetDiscontinuity(long bDiscontinuity) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetMediaTime(__int64* pTimeStart/*[out]*/, 
                                                 __int64* pTimeEnd/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetMediaTime(__int64* pTimeStart/*[in]*/, 
                                                 __int64* pTimeEnd/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IDecklinkSampleGrabber
// Flags:     (0)
// GUID:      {CAFA3E5A-16E0-42CE-B064-78DE6C3068F8}
// *********************************************************************//
interface IDecklinkSampleGrabber  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE SetOneShot(long OneShot/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetMediaType(Decklinkpubliclib_tlb::_AMMediaType* pamt/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetConnectedMediaType(Decklinkpubliclib_tlb::_AMMediaType* pamt/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetBufferSamples(long BufferThem/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetCurrentBuffer(long* pBufferSize/*[out]*/, 
                                                     long* pBuffer/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetCurrentSample(Decklinkpubliclib_tlb::IMediaSample** ppSample/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetCallback(Decklinkpubliclib_tlb::IDecklinkSampleGrabberCB* pCallback/*[in]*/, 
                                                long WhichMethodToCallback/*[in]*/) = 0; // [-1]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<MEDIASUBTYPE_V210>  TCOMMEDIASUBTYPE_V210;

typedef TComInterface<MEDIASUBTYPE_v210a>  TCOMMEDIASUBTYPE_v210a;

typedef TComInterface<MEDIASUBTYPE_r210>  TCOMMEDIASUBTYPE_r210;

typedef TComInterface<MEDIASUBTYPE_HDYC>  TCOMMEDIASUBTYPE_HDYC;

typedef TComInterface<IDecklinkKeyer>  TCOMIDecklinkKeyer;

typedef TComInterface<IADecklinkKeyer>  TCOMIADecklinkKeyer;

// *********************************************************************//
// DispIntf:  IADecklinkKeyer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4DB4A578-7353-46E3-A607-75F2E3B5E539}
// *********************************************************************//
template<class T>
class IADecklinkKeyerDispT : public TAutoDriver<IADecklinkKeyer>
{
public:
  IADecklinkKeyerDispT(){}

  IADecklinkKeyerDispT(IADecklinkKeyer *pintf)
  {
    TAutoDriver<IADecklinkKeyer>::Bind(pintf, false);
  }

  IADecklinkKeyerDispT(IADecklinkKeyerPtr pintf)
  {
    TAutoDriver<IADecklinkKeyer>::Bind(pintf, true);
  }

  IADecklinkKeyerDispT& operator=(IADecklinkKeyer *pintf)
  {
    TAutoDriver<IADecklinkKeyer>::Bind(pintf, false);
    return *this;
  }

  IADecklinkKeyerDispT& operator=(IADecklinkKeyerPtr pintf)
  {
    TAutoDriver<IADecklinkKeyer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_AlphaBlendModeOn(unsigned isExternalKey/*[in]*/);
  HRESULT         __fastcall set_AlphaBlendModeOff();
  HRESULT         __fastcall set_AlphaLevel(unsigned alphaLevel/*[in]*/);
  HRESULT         __fastcall set_AlphaAutoBlendSettings(unsigned rampFrames/*[in]*/, 
                                                        unsigned onFrames/*[in]*/, 
                                                        unsigned offFrames/*[in]*/, 
                                                        unsigned blendProcessRepeats/*[in]*/);
  HRESULT         __fastcall do_AlphaRampOn(unsigned framesDuration/*[in]*/);
  HRESULT         __fastcall do_AlphaRampOff(unsigned framesDuration/*[in]*/);
  HRESULT         __fastcall get_DeviceSupportsKeying();
  HRESULT         __fastcall get_DeviceSupportsExternalKeying();
  HRESULT         __fastcall set_DefaultTimebase(long Timebase/*[in]*/);

};
typedef IADecklinkKeyerDispT<IADecklinkKeyer> IADecklinkKeyerDisp;

typedef TComInterface<IDecklinkRawDeviceControl>  TCOMIDecklinkRawDeviceControl;

typedef TComInterface<IADecklinkRawDeviceControl>  TCOMIADecklinkRawDeviceControl;

// *********************************************************************//
// DispIntf:  IADecklinkRawDeviceControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AF2662C6-3ABE-498E-ADE9-2540B6E30608}
// *********************************************************************//
template<class T>
class IADecklinkRawDeviceControlDispT : public TAutoDriver<IADecklinkRawDeviceControl>
{
public:
  IADecklinkRawDeviceControlDispT(){}

  IADecklinkRawDeviceControlDispT(IADecklinkRawDeviceControl *pintf)
  {
    TAutoDriver<IADecklinkRawDeviceControl>::Bind(pintf, false);
  }

  IADecklinkRawDeviceControlDispT(IADecklinkRawDeviceControlPtr pintf)
  {
    TAutoDriver<IADecklinkRawDeviceControl>::Bind(pintf, true);
  }

  IADecklinkRawDeviceControlDispT& operator=(IADecklinkRawDeviceControl *pintf)
  {
    TAutoDriver<IADecklinkRawDeviceControl>::Bind(pintf, false);
    return *this;
  }

  IADecklinkRawDeviceControlDispT& operator=(IADecklinkRawDeviceControlPtr pintf)
  {
    TAutoDriver<IADecklinkRawDeviceControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall SendRawCommandSync(unsigned_char* command/*[in]*/, 
                                                unsigned lenCommand/*[in]*/, 
                                                unsigned_char* response/*[in,out]*/, 
                                                unsigned* lenResponse/*[in,out]*/);
  HRESULT         __fastcall SendRawCommandAsync2(VARIANT* rawCommand/*[in,out]*/, 
                                                  unsigned cRawCommand/*[in]*/);

};
typedef IADecklinkRawDeviceControlDispT<IADecklinkRawDeviceControl> IADecklinkRawDeviceControlDisp;

typedef TComInterface<IDecklinkStatus>  TCOMIDecklinkStatus;

typedef TComInterface<IADecklinkStatus>  TCOMIADecklinkStatus;

// *********************************************************************//
// DispIntf:  IADecklinkStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E530B1C-8276-4BFA-B8BA-4BD360C79FA7}
// *********************************************************************//
template<class T>
class IADecklinkStatusDispT : public TAutoDriver<IADecklinkStatus>
{
public:
  IADecklinkStatusDispT(){}

  IADecklinkStatusDispT(IADecklinkStatus *pintf)
  {
    TAutoDriver<IADecklinkStatus>::Bind(pintf, false);
  }

  IADecklinkStatusDispT(IADecklinkStatusPtr pintf)
  {
    TAutoDriver<IADecklinkStatus>::Bind(pintf, true);
  }

  IADecklinkStatusDispT& operator=(IADecklinkStatus *pintf)
  {
    TAutoDriver<IADecklinkStatus>::Bind(pintf, false);
    return *this;
  }

  IADecklinkStatusDispT& operator=(IADecklinkStatusPtr pintf)
  {
    TAutoDriver<IADecklinkStatus>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetVideoInputStatus(int* videoStatus/*[out]*/, 
                                                 int* genlockStatus/*[out]*/);
  HRESULT         __fastcall RegisterVideoStatusChangeEvent(unsigned_long event/*[in]*/);

};
typedef IADecklinkStatusDispT<IADecklinkStatus> IADecklinkStatusDisp;

typedef TComInterface<IDecklinkCaptureBanner>  TCOMIDecklinkCaptureBanner;

typedef TComInterface<IADecklinkCaptureBanner>  TCOMIADecklinkCaptureBanner;

// *********************************************************************//
// DispIntf:  IADecklinkCaptureBanner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B434A6C-768E-4F55-8EB2-D219EBA85193}
// *********************************************************************//
template<class T>
class IADecklinkCaptureBannerDispT : public TAutoDriver<IADecklinkCaptureBanner>
{
public:
  IADecklinkCaptureBannerDispT(){}

  IADecklinkCaptureBannerDispT(IADecklinkCaptureBanner *pintf)
  {
    TAutoDriver<IADecklinkCaptureBanner>::Bind(pintf, false);
  }

  IADecklinkCaptureBannerDispT(IADecklinkCaptureBannerPtr pintf)
  {
    TAutoDriver<IADecklinkCaptureBanner>::Bind(pintf, true);
  }

  IADecklinkCaptureBannerDispT& operator=(IADecklinkCaptureBanner *pintf)
  {
    TAutoDriver<IADecklinkCaptureBanner>::Bind(pintf, false);
    return *this;
  }

  IADecklinkCaptureBannerDispT& operator=(IADecklinkCaptureBannerPtr pintf)
  {
    TAutoDriver<IADecklinkCaptureBanner>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetNoInputFrame(/*AUTO_PARAM_ERROR(unsigned_char** frame)*/ VARIANT  frame);
  HRESULT         __fastcall BlackVideo(unsigned_char* bmih/*[in]*/, unsigned_char* frame/*[in]*/);

};
typedef IADecklinkCaptureBannerDispT<IADecklinkCaptureBanner> IADecklinkCaptureBannerDisp;

typedef TComInterface<IDecklinkIOControl>  TCOMIDecklinkIOControl;

typedef TComInterface<IADecklinkIOControl>  TCOMIADecklinkIOControl;

// *********************************************************************//
// DispIntf:  IADecklinkIOControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF0EE278-DFC0-432F-AD84-E780835B45B3}
// *********************************************************************//
template<class T>
class IADecklinkIOControlDispT : public TAutoDriver<IADecklinkIOControl>
{
public:
  IADecklinkIOControlDispT(){}

  IADecklinkIOControlDispT(IADecklinkIOControl *pintf)
  {
    TAutoDriver<IADecklinkIOControl>::Bind(pintf, false);
  }

  IADecklinkIOControlDispT(IADecklinkIOControlPtr pintf)
  {
    TAutoDriver<IADecklinkIOControl>::Bind(pintf, true);
  }

  IADecklinkIOControlDispT& operator=(IADecklinkIOControl *pintf)
  {
    TAutoDriver<IADecklinkIOControl>::Bind(pintf, false);
    return *this;
  }

  IADecklinkIOControlDispT& operator=(IADecklinkIOControlPtr pintf)
  {
    TAutoDriver<IADecklinkIOControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetIOFeatures(unsigned_long* features/*[out]*/);
  HRESULT         __fastcall SetAnalogueOutput(long isComponent/*[in]*/, long setupIs75/*[in]*/);
  HRESULT         __fastcall SetVideoInput(long inputIsDigital/*[in]*/, long isComponent/*[in]*/, 
                                           long setupIs75/*[in]*/);
  HRESULT         __fastcall SetDualLinkOutput(long enableDualLinkOutput/*[in]*/);
  HRESULT         __fastcall SetSingleFieldOutputForSynchronousFrames(long singleFieldOutput/*[in]*/);
  HRESULT         __fastcall SetHDTVPulldownOnOutput(long enableHDTV32PulldownOnOutput/*[in]*/);
  HRESULT         __fastcall SetBlackToDeckInCapture(unsigned_long blackToDeckSetting/*[in]*/);
  HRESULT         __fastcall SetAFrameReference(unsigned_long aFrameReference/*[in]*/);
  HRESULT         __fastcall SetCaptureVANCLines(unsigned_long vancLine1/*[in]*/, 
                                                 unsigned_long vancLine2/*[in]*/, 
                                                 unsigned_long vancLine3/*[in]*/);
  HRESULT         __fastcall SetVideoOutputDownconversionMode(unsigned_long downconversionMode/*[in]*/);
  HRESULT         __fastcall SetAudioInputSource(unsigned_long audioInputSource/*[in]*/);
  HRESULT         __fastcall SetGenlockTiming(int timingOffset/*[in]*/);
  HRESULT         __fastcall SetVideoOutputDownconversionMode2(unsigned_long downconversionMode/*[in]*/
                                                               , 
                                                               unsigned_long selectVideoOutputConversionOutputs/*[in]*/);
  HRESULT         __fastcall SetCaptureTimecodeSource(unsigned_long timecodeSource/*[in]*/);
  HRESULT         __fastcall SetVideoInput2(unsigned_long videoSource/*[in]*/, 
                                            long setupIs75/*[in]*/, 
                                            long componentLevelsSMPTE/*[in]*/);
  HRESULT         __fastcall SetAnalogueOutput2(unsigned_long videoOutput/*[in]*/, 
                                                long setupIs75/*[in]*/, 
                                                long componentLevelsSMPTE/*[in]*/);

};
typedef IADecklinkIOControlDispT<IADecklinkIOControl> IADecklinkIOControlDisp;

typedef TComInterface<IDecklinkMediaSample>  TCOMIDecklinkMediaSample;

typedef TComInterface<IADecklinkMediaSample>  TCOMIADecklinkMediaSample;

// *********************************************************************//
// DispIntf:  IADecklinkMediaSample
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BD0A576-D366-4DFA-96AE-5292971A4999}
// *********************************************************************//
template<class T>
class IADecklinkMediaSampleDispT : public TAutoDriver<IADecklinkMediaSample>
{
public:
  IADecklinkMediaSampleDispT(){}

  IADecklinkMediaSampleDispT(IADecklinkMediaSample *pintf)
  {
    TAutoDriver<IADecklinkMediaSample>::Bind(pintf, false);
  }

  IADecklinkMediaSampleDispT(IADecklinkMediaSamplePtr pintf)
  {
    TAutoDriver<IADecklinkMediaSample>::Bind(pintf, true);
  }

  IADecklinkMediaSampleDispT& operator=(IADecklinkMediaSample *pintf)
  {
    TAutoDriver<IADecklinkMediaSample>::Bind(pintf, false);
    return *this;
  }

  IADecklinkMediaSampleDispT& operator=(IADecklinkMediaSamplePtr pintf)
  {
    TAutoDriver<IADecklinkMediaSample>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetVANCBuffer(/*AUTO_PARAM_ERROR(unsigned_char** ppBuffer)*/ VARIANT  ppBuffer);

};
typedef IADecklinkMediaSampleDispT<IADecklinkMediaSample> IADecklinkMediaSampleDisp;

typedef TComInterface<IDecklinkSampleGrabberCB>  TCOMIDecklinkSampleGrabberCB;

typedef TComInterface<IMediaSample>  TCOMIMediaSample;

typedef TComInterface<IDecklinkSampleGrabber>  TCOMIDecklinkSampleGrabber;

// *********************************************************************//
// DispIntf:  IADecklinkKeyer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4DB4A578-7353-46E3-A607-75F2E3B5E539}
// *********************************************************************//
template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::set_AlphaBlendModeOn(unsigned isExternalKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("set_AlphaBlendModeOn"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = isExternalKey /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::set_AlphaBlendModeOff()
{
  _TDispID _dispid(*this, OLETEXT("set_AlphaBlendModeOff"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::set_AlphaLevel(unsigned alphaLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("set_AlphaLevel"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = alphaLevel /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::set_AlphaAutoBlendSettings(unsigned rampFrames/*[in]*/, 
                                                    unsigned onFrames/*[in]*/, 
                                                    unsigned offFrames/*[in]*/, 
                                                    unsigned blendProcessRepeats/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("set_AlphaAutoBlendSettings"), DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = rampFrames /*[VT_UINT:0]*/;
  _args[2] = onFrames /*[VT_UINT:0]*/;
  _args[3] = offFrames /*[VT_UINT:0]*/;
  _args[4] = blendProcessRepeats /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::do_AlphaRampOn(unsigned framesDuration/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("do_AlphaRampOn"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = framesDuration /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::do_AlphaRampOff(unsigned framesDuration/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("do_AlphaRampOff"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = framesDuration /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::get_DeviceSupportsKeying()
{
  _TDispID _dispid(*this, OLETEXT("get_DeviceSupportsKeying"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::get_DeviceSupportsExternalKeying()
{
  _TDispID _dispid(*this, OLETEXT("get_DeviceSupportsExternalKeying"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IADecklinkKeyerDispT<T>::set_DefaultTimebase(long Timebase/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("set_DefaultTimebase"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Timebase /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IADecklinkRawDeviceControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AF2662C6-3ABE-498E-ADE9-2540B6E30608}
// *********************************************************************//
template <class T> HRESULT __fastcall
IADecklinkRawDeviceControlDispT<T>::SendRawCommandSync(unsigned_char* command/*[in]*/, 
                                                       unsigned lenCommand/*[in]*/, 
                                                       unsigned_char* response/*[in,out]*/, 
                                                       unsigned* lenResponse/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRawCommandSync"), DISPID(1));
  TAutoArgs<4> _args;
  _args[1] = command /*[VT_UI1:1]*/;
  _args[2] = lenCommand /*[VT_UINT:0]*/;
  _args[3] = response /*[VT_UI1:1]*/;
  _args[4] = lenResponse /*[VT_UINT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkRawDeviceControlDispT<T>::SendRawCommandAsync2(VARIANT* rawCommand/*[in,out]*/, 
                                                         unsigned cRawCommand/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRawCommandAsync2"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = rawCommand /*[VT_VARIANT:1]*/;
  _args[2] = cRawCommand /*[VT_UINT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IADecklinkStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E530B1C-8276-4BFA-B8BA-4BD360C79FA7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IADecklinkStatusDispT<T>::GetVideoInputStatus(int* videoStatus/*[out]*/, int* genlockStatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVideoInputStatus"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = videoStatus /*[VT_INT:1]*/;
  _args[2] = genlockStatus /*[VT_INT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkStatusDispT<T>::RegisterVideoStatusChangeEvent(unsigned_long event/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterVideoStatusChangeEvent"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = event /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IADecklinkCaptureBanner
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B434A6C-768E-4F55-8EB2-D219EBA85193}
// *********************************************************************//
template <class T> HRESULT __fastcall
IADecklinkCaptureBannerDispT<T>::GetNoInputFrame(/*AUTO_PARAM_ERROR(unsigned_char** frame)*/ VARIANT  frame)
{
  _TDispID _dispid(*this, OLETEXT("GetNoInputFrame"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = frame;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkCaptureBannerDispT<T>::BlackVideo(unsigned_char* bmih/*[in]*/, 
                                            unsigned_char* frame/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackVideo"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = bmih /*[VT_UI1:1]*/;
  _args[2] = frame /*[VT_UI1:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IADecklinkIOControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF0EE278-DFC0-432F-AD84-E780835B45B3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::GetIOFeatures(unsigned_long* features/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIOFeatures"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = features /*[VT_UI4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetAnalogueOutput(long isComponent/*[in]*/, long setupIs75/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAnalogueOutput"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = isComponent /*[VT_I4:0]*/;
  _args[2] = setupIs75 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetVideoInput(long inputIsDigital/*[in]*/, long isComponent/*[in]*/, 
                                           long setupIs75/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVideoInput"), DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = inputIsDigital /*[VT_I4:0]*/;
  _args[2] = isComponent /*[VT_I4:0]*/;
  _args[3] = setupIs75 /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetDualLinkOutput(long enableDualLinkOutput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDualLinkOutput"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = enableDualLinkOutput /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetSingleFieldOutputForSynchronousFrames(long singleFieldOutput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSingleFieldOutputForSynchronousFrames"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = singleFieldOutput /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetHDTVPulldownOnOutput(long enableHDTV32PulldownOnOutput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHDTVPulldownOnOutput"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = enableHDTV32PulldownOnOutput /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetBlackToDeckInCapture(unsigned_long blackToDeckSetting/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetBlackToDeckInCapture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = blackToDeckSetting /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetAFrameReference(unsigned_long aFrameReference/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAFrameReference"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = aFrameReference /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetCaptureVANCLines(unsigned_long vancLine1/*[in]*/, 
                                                 unsigned_long vancLine2/*[in]*/, 
                                                 unsigned_long vancLine3/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCaptureVANCLines"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = vancLine1 /*[VT_UI4:0]*/;
  _args[2] = vancLine2 /*[VT_UI4:0]*/;
  _args[3] = vancLine3 /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetVideoOutputDownconversionMode(unsigned_long downconversionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVideoOutputDownconversionMode"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = downconversionMode /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetAudioInputSource(unsigned_long audioInputSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAudioInputSource"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = audioInputSource /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetGenlockTiming(int timingOffset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetGenlockTiming"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = timingOffset /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetVideoOutputDownconversionMode2(unsigned_long downconversionMode/*[in]*/
                                                               , 
                                                               unsigned_long selectVideoOutputConversionOutputs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVideoOutputDownconversionMode2"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = downconversionMode /*[VT_UI4:0]*/;
  _args[2] = selectVideoOutputConversionOutputs /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetCaptureTimecodeSource(unsigned_long timecodeSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCaptureTimecodeSource"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = timecodeSource /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetVideoInput2(unsigned_long videoSource/*[in]*/, 
                                            long setupIs75/*[in]*/, 
                                            long componentLevelsSMPTE/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVideoInput2"), DISPID(15));
  TAutoArgs<3> _args;
  _args[1] = videoSource /*[VT_UI4:0]*/;
  _args[2] = setupIs75 /*[VT_I4:0]*/;
  _args[3] = componentLevelsSMPTE /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IADecklinkIOControlDispT<T>::SetAnalogueOutput2(unsigned_long videoOutput/*[in]*/, 
                                                long setupIs75/*[in]*/, 
                                                long componentLevelsSMPTE/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAnalogueOutput2"), DISPID(16));
  TAutoArgs<3> _args;
  _args[1] = videoOutput /*[VT_UI4:0]*/;
  _args[2] = setupIs75 /*[VT_I4:0]*/;
  _args[3] = componentLevelsSMPTE /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IADecklinkMediaSample
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5BD0A576-D366-4DFA-96AE-5292971A4999}
// *********************************************************************//
template <class T> HRESULT __fastcall
IADecklinkMediaSampleDispT<T>::GetVANCBuffer(/*AUTO_PARAM_ERROR(unsigned_char** ppBuffer)*/ VARIANT  ppBuffer)
{
  _TDispID _dispid(*this, OLETEXT("GetVANCBuffer"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = ppBuffer;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Decklinkpubliclib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Decklinkpubliclib_tlb;
#endif

#pragma option pop

#endif // DecklinkPublicLib_TLBH
